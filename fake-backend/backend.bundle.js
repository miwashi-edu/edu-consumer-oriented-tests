(()=>{var e={384:(e,s,n)=>{n(818).config();const t={PORT:process.env.PORT||3e3,dbURI:process.env.DB_URI||"dummy default",secretKey:process.env.SECRET_KEY||"dummy default",anotherConfig:process.env.ANOTHER_CONFIG||"dummy default"};e.exports=t},891:(e,s,n)=>{const t=n(258);s.listAllAnimals=(e,s)=>{s.json(t.listAllAnimals())},s.getAnimalById=(e,s)=>{const n=parseInt(e.params.animalId,10),i=t.getAnimalById(n);i?s.json(i):s.status(404).send({message:"Animal not found"})},s.createAnimal=(e,s)=>{const n=t.createAnimal(e.body);s.status(201).json(n)},s.updateAnimal=(e,s)=>{const n=parseInt(e.params.animalId,10),i=t.updateAnimal(n,e.body);i?s.json(i):s.status(404).send({message:"Animal not found"})},s.deleteAnimal=(e,s)=>{const n=parseInt(e.params.animalId,10),i=t.deleteAnimal(n);i?s.json(i):s.status(404).send({message:"Animal not found"})}},678:(e,s,n)=>{const t=n(775);s.listImages=(e,s)=>{t.listImages(e).then((e=>{s.send(e)})).catch((e=>{s.status(500).send(e)}))}},258:(e,s)=>{let n=[{id:1,name:"Elephant",description:"A large mammal with a trunk.",imageUrl:"/images/elefant.jpg"},{id:2,name:"Gorilla",description:"A large, predominantly ground-dwelling ape.",imageUrl:"/images/gorilla.jpg"},{id:3,name:"Crocodile",description:"A large aquatic reptile with a powerful jaw.",imageUrl:"/images/crocodile.jpg"}];s.listAllAnimals=()=>n,s.getAnimalById=e=>n.find((s=>s.id===e)),s.createAnimal=e=>{const s={id:n.length+1,...e};return n.push(s),s},s.updateAnimal=(e,s)=>{const t=n.findIndex((s=>s.id===e));return-1!==t?(n[t]={...n[t],...s},n[t]):null},s.deleteAnimal=e=>{const s=n.findIndex((s=>s.id===e));return-1!==s?n.splice(s,1)[0]:null}},775:(e,s,n)=>{const t=n(896),i=n(928).join(__dirname,"../../images");e.exports={listImages:e=>new Promise(((s,n)=>{t.readdir(i,((t,i)=>{if(t)n("Failed to list images");else{const n=`${e.protocol}://${e.get("host")}/images`,t=i.map((e=>{const s=`${n}/${e}`;return`<div class="image-item">\n                                <img src="${s}" alt="${e}" style="width:100%;max-width:300px;">\n                                <button onclick="navigator.clipboard.writeText('${s}');alert('URL copied to clipboard!');">Copy URL</button>\n                            </div>`})).join("");s(`<html><head>\n                                    <style>\n                                        .image-gallery {\n                                            display: flex;\n                                            flex-wrap: wrap;\n                                            justify-content: space-around;\n                                            padding: 0;\n                                            margin: 0;\n                                        }\n                                        .image-item {\n                                            margin: 10px;\n                                            border: 1px solid #ccc;\n                                            box-shadow: 2px 2px 6px 0px rgba(0,0,0,0.3);\n                                        }\n                                        button {\n                                            width: 100%;\n                                            padding: 8px;\n                                            border: none;\n                                            border-top: 1px solid #ccc;\n                                            background-color: lightgrey;\n                                            cursor: pointer;\n                                        }\n                                        button:hover {\n                                            background-color: grey;\n                                            color: white;\n                                        }\n                                    </style>\n                                  </head><body>\n                                    <h1>List of Images</h1>\n                                    <div class="image-gallery">${t}</div>\n                                  </body></html>`)}}))}))}},616:(e,s,n)=>{const t=n(252),i=n(891),a=t.Router();a.get("/",i.listAllAnimals),a.get("/:animalId",i.getAnimalById),a.post("/",i.createAnimal),a.put("/:animalId",i.updateAnimal),a.delete("/:animalId",i.deleteAnimal),e.exports=a},903:(e,s,n)=>{const t=n(252),i=n(928),a=n(678),o=t.Router();o.get("/list-images",a.listImages),o.get("/:imageName",((e,s)=>{const n=i.join(__dirname,"../../images",e.params.imageName);s.sendFile(n)})),e.exports=o},878:(e,s,n)=>{const t=n(252).Router();t.get("/stop",((e,s)=>{s.send("Server is shutting down..."),process.kill(process.pid,"SIGTERM")})),e.exports=t},985:(e,s,n)=>{const t=n(252),i=n(320),a=n(450),o=n(928),r=n(616),l=n(903),d=n(878),m=a({swaggerDefinition:{openapi:"3.0.0",info:{title:"Animal App API",version:"1.0.0",description:"API to manage animal information and images"},servers:[{url:"http://localhost:3000"}]},apis:["./src/routes/*.js"]}),p=t();p.use(t.json()),p.use("/api-docs",i.serve,i.setup(m)),p.use("/animals",r),p.use("/images",l),p.use("/operations",d),p.use("/images",t.static(o.join(__dirname,"images"))),p.use("*",((e,s)=>{s.redirect("/api-docs")})),e.exports=p},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},450:e=>{"use strict";e.exports=require("swagger-jsdoc")},320:e=>{"use strict";e.exports=require("swagger-ui-express")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")}},s={};function n(t){var i=s[t];if(void 0!==i)return i.exports;var a=s[t]={exports:{}};return e[t](a,a.exports,n),a.exports}(()=>{const e=n(985),{PORT:s}=n(384),t=e.listen(s,(()=>{console.log(`Server started on port ${s}`),console.log("Ctrl-C to stop server!")})),i=()=>{console.log("Gracefully shutting down..."),t.close((()=>{console.log("Server shut down."),process.exit(0)}))};process.on("SIGTERM",i),process.on("SIGINT",i)})()})();